name: "Copilot Setup Steps"

# Automatically run the setup steps when they are changed to allow for easy validation, and
# allow manual testing through the repository's "Actions" tab
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: macos-latest

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

    # Set environment variables from secrets
    env:
      TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}

    # You can define any steps you want, and they will run before the agent starts.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          # Install required packages with Homebrew
          brew install \
            make \
            qemu \
            xz \
            unzip \
            wget \
            curl \
            git \
            shellcheck \
            cpio \
            gzip \
            rsync \
            jq

      - name: Install Docker (for testing containers)
        run: |
          # Docker Desktop is pre-installed on macOS GitHub runners
          # Just verify it's available and start if needed
          if ! docker info > /dev/null 2>&1; then
            echo "Starting Docker Desktop..."
            open -a Docker
            # Wait for Docker to start
            timeout=60
            while ! docker info > /dev/null 2>&1 && [ $timeout -gt 0 ]; do
              echo "Waiting for Docker to start... ($timeout seconds remaining)"
              sleep 5
              timeout=$((timeout - 5))
            done
          fi

      - name: Verify installation
        run: |
          make --version
          qemu-system-aarch64 --version
          docker --version
          shellcheck --version
          xz --version
          cpio --version
          jq --version

      - name: Create required directories
        run: |
          mkdir -p images4rpi
          mkdir -p pi5_installer_work
          mkdir -p qemu_test

      - name: Set up shell environment
        run: |
          echo "export PATH=/opt/homebrew/bin:\$PATH" >> ~/.zshrc
          echo "alias ll='ls -la'" >> ~/.zshrc
          
          # Add homebrew paths for keg-only packages to current session
          echo "/opt/homebrew/bin" >> $GITHUB_PATH
          echo "/opt/homebrew/opt/make/libexec/gnubin" >> $GITHUB_PATH
          echo "/opt/homebrew/opt/cpio/bin" >> $GITHUB_PATH
          
          # Also add to shell profiles for completeness
          echo 'export PATH="/opt/homebrew/opt/make/libexec/gnubin:$PATH"' >> ~/.zshrc
          echo 'export PATH="/opt/homebrew/opt/cpio/bin:$PATH"' >> ~/.zshrc

      - name: Test GitHub API access
        run: |
          echo "Testing GitHub API access..."
          # Test the Home Assistant OS releases API
          response=$(curl -s "https://api.github.com/repos/home-assistant/operating-system/releases/latest")
          echo "API Response length: $(echo "$response" | wc -c)"
          echo "First 500 characters of response:"
          echo "$response" | head -c 500
          echo ""
          
          # Check for rate limiting
          if echo "$response" | grep -q "rate limit"; then
            echo "⚠️  Rate limit detected in API response"
            echo "Full response:"
            echo "$response"
          fi
          
          echo "Testing jq parsing..."
          if echo "$response" | jq -e . > /dev/null 2>&1; then
            echo "✅ Valid JSON response"
            assets_count=$(echo "$response" | jq '.assets | length // 0')
            echo "Assets count: $assets_count"
            if [[ "$assets_count" -gt 0 ]]; then
              echo "Available assets:"
              echo "$response" | jq -r '.assets[].name' | head -5
            fi
          else
            echo "❌ Invalid JSON response"
            echo "Raw response:"
            echo "$response"
          fi
